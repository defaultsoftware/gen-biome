/*! For license information please see index.js.LICENSE.txt */
(()=>{"use strict";var e={"./demo/src/biomes.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BIOMES=void 0,t.BIOMES=[{params:{lowerBound:0,upperBound:.2},data:{name:"WATER",color:"dodgerblue"}},{params:{lowerBound:.2,upperBound:.3},data:{name:"SAND",color:"#edd665"}},{params:{lowerBound:.3,upperBound:.7},data:{name:"GRASS",color:"#9bd138"}},{params:{lowerBound:.7,upperBound:.9},data:{name:"MOUNT",color:"gray"}},{params:{lowerBound:.9},data:{name:"SNOW",color:"white"}}]},"./demo/src/interface.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ui=void 0,t.ui={screen:document.getElementById("screen"),inputs:{resetSeed:document.querySelector("[name=resetSeed]"),frequencyChange:document.querySelector("[name=frequencyChange]"),borderSmoothness:document.querySelector("[name=borderSmoothness]"),heightRedistribution:document.querySelector("[name=heightRedistribution]"),worldWidth:document.querySelector("[name=worldWidth]"),worldHeight:document.querySelector("[name=worldHeight]")},buttons:{generate:document.getElementById("generate")}}},"./demo/src/render.ts":(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.renderOnCanvas=void 0;const o=r("./demo/src/interface.ts"),i=o.ui.screen.getContext("2d"),n=2;t.renderOnCanvas=function(e){var t;o.ui.screen.width=e.width*n,o.ui.screen.height=e.height*n;for(let r=0;r<e.height;r++)for(let o=0;o<e.width;o++){const s=e.getAt({x:o,y:r});i.fillStyle=null!==(t=null==s?void 0:s.color)&&void 0!==t?t:"purple",i.fillRect(o*n,r*n,n,n)}}},"./src/index.ts":function(e,t,r){var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var i=Object.getOwnPropertyDescriptor(t,r);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,i)}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),i(r("./src/world-generator.ts"),t),i(r("./src/world.ts"),t),i(r("./src/types.ts"),t)},"./src/types.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0})},"./src/utils/clamp.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clamp=void 0,t.clamp=function(e,t,r=[0,1]){return Math.max(r[0],Math.min(r[1],null!=e?e:t))}},"./src/utils/perlin.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.generateNoise=t.generateSeed=void 0;const r=4095,o=4,i=1<<o,n=256,s=.5,d=1.1;function a(e){return.5*(1-Math.cos(e*Math.PI))}t.generateSeed=function(){const e=[];for(let t=0;t<r+1;t++)e.push(Math.random());return e},t.generateNoise=function(e){let{x:t,y:r}=e;const{seed:l,frequency:u,redistribution:c,octaves:h}=e,m=l.length-1;t*=u,r*=u;let p,v,g,f,y,b=Math.floor(t),w=Math.floor(r),B=t-b,M=r-w,_=0,O=.5;for(let e=0;e<h;e++){let e=b+(w<<o);p=a(B),v=a(M),g=l[e&m],g+=p*(l[e+1&m]-g),f=l[e+i&m],f+=p*(l[e+i+1&m]-f),g+=v*(f-g),e+=n,f=l[e&m],f+=p*(l[e+1&m]-f),y=l[e+i&m],y+=p*(l[e+i+1&m]-y),f+=v*(y-f),_+=g*O,O*=s,b<<=1,B*=2,B>=1&&(b++,B--),w<<=1,M*=2,M>=1&&(w++,M--)}return _>.5?_=Math.pow(_,(1.5-_)/d):_<.5&&(_=Math.pow(_,(1.5-_)*d)),_=Math.pow(_,c),_}},"./src/world-biome.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WorldBiome=void 0;t.WorldBiome=class{constructor(e,t){var r,o;this.lowerBound=Math.max(0,null!==(r=e.lowerBound)&&void 0!==r?r:0),this.upperBound=Math.min(1,null!==(o=e.upperBound)&&void 0!==o?o:1),this.data=t}}},"./src/world-generator.ts":(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WorldGenerator=void 0;const o=r("./src/utils/perlin.ts"),i=r("./src/world.ts"),n=r("./src/world-layer.ts");t.WorldGenerator=class{constructor(e){this.layers=[],this.width=e.width,this.height=e.height}addLayer(e={}){const t=new n.WorldLayer(e);return this.layers.push(t),t}clearLayers(){this.layers=[]}getLayers(){return this.layers}generate(e){const t=null!=e?e:(0,o.generateSeed)(),r=[];for(const e of this.layers){const o=this.generateLayer(e,t);for(let e=0;e<this.height;e++){r[e]||(r[e]=[]);for(let t=0;t<this.width;t++)o[e][t]&&(r[e][t]=o[e][t].data)}}for(let e=0;e<this.height;e++)for(let t=0;t<this.width;t++)if(void 0===r[e][t])throw Error(`World matrix contains empty biome at ${t},${e}`);return new i.World(r,t)}generateLayer(e,t){const r=e.getGenerationParams(),i=[];for(let n=0;n<this.height;n++){i[n]=[];for(let s=0;s<this.width;s++){const d=(0,o.generateNoise)(Object.assign(Object.assign({},r),{seed:t,x:s/this.width,y:n/this.height})),a=e.getBiomeByHeight(d);a&&(i[n][s]=a)}}return i}}},"./src/world-layer.ts":(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WorldLayer=void 0;const o=r("./src/utils/clamp.ts"),i=r("./src/world-biome.ts");t.WorldLayer=class{constructor(e={}){this.biomes=[],this.frequency=Math.round(31*(0,o.clamp)(null==e?void 0:e.frequencyChange,.3)+1),this.octaves=Math.round(14*(1-(0,o.clamp)(null==e?void 0:e.borderSmoothness,.5))+1),this.redistribution=2-(0,o.clamp)(null==e?void 0:e.heightRedistribution,1,[.5,1.5])}addBiome(e,t){const r=new i.WorldBiome(e,t);return this.biomes.push(r),r}clearBiomes(){this.biomes=[]}getBiomes(){return this.biomes}getBiomeByHeight(e){return this.getBiomes().find((t=>e>=t.lowerBound&&e<=t.upperBound))}getGenerationParams(){return{frequency:this.frequency,octaves:this.octaves,redistribution:this.redistribution}}}},"./src/world.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.World=void 0;t.World=class{constructor(e,t){this.matrix=[],this.width=e[0].length,this.height=e.length,this.matrix=e,this.seed=t}getMatrix(){return this.matrix}getAt(e){var t;return null===(t=this.matrix[e.y])||void 0===t?void 0:t[e.x]}replaceAt(e,t){if(e.y>=this.height||e.x>=this.width)throw Error("Specified position is out of world bounds");this.matrix[e.y][e.x]=t}}}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o].call(n.exports,n,n.exports,r),n.exports}var o={};(()=>{var e,t,i=o;Object.defineProperty(i,"__esModule",{value:!0});const n=r("./src/index.ts"),s=r("./demo/src/render.ts"),d=r("./demo/src/biomes.ts"),a=r("./demo/src/interface.ts");let l;null===(e=a.ui.buttons.generate)||void 0===e||e.addEventListener("click",(()=>{var e,t,r,o,i,u;const c=new n.WorldGenerator({width:Number(null===(e=a.ui.inputs.worldWidth)||void 0===e?void 0:e.value),height:Number(null===(t=a.ui.inputs.worldHeight)||void 0===t?void 0:t.value)}),h=c.addLayer({frequencyChange:Number(null===(r=a.ui.inputs.frequencyChange)||void 0===r?void 0:r.value),borderSmoothness:Number(null===(o=a.ui.inputs.borderSmoothness)||void 0===o?void 0:o.value),heightRedistribution:Number(null===(i=a.ui.inputs.heightRedistribution)||void 0===i?void 0:i.value)});for(const{params:e,data:t}of d.BIOMES)h.addBiome(e,t);const m=(null===(u=a.ui.inputs.resetSeed)||void 0===u?void 0:u.checked)?void 0:l,p=c.generate(m);l=p.seed,(0,s.renderOnCanvas)(p)})),null===(t=a.ui.buttons.generate)||void 0===t||t.click()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,