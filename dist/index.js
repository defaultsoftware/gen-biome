"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,r,i){void 0===i&&(i=r);var a=Object.getOwnPropertyDescriptor(t,r);a&&("get"in a?t.__esModule:!a.writable&&!a.configurable)||(a={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,i,a)}:function(e,t,r,i){e[i=void 0===i?r:i]=t[r]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&__createBinding(t,e,r);return __setModuleDefault(t,e),t};const perlin_1=__importStar(require("./perlin"));class GenBiome{width;height;layers;data=[];seed=[];constructor(e){var{width:e,height:t,layers:r=[]}=e;this.width=e,this.height=t,this.layers=r}addLayer(e){this.layers.push(e)}generate(){0===this.seed.length&&this.refreshSeed(),this.data=[];for(const e of this.layers){var r=this.generateLayer(e);for(let t=0;t<r.length;t++)for(let e=0;e<r[t].length;e++)null!==r[t][e]&&(this.data[t]||(this.data[t]=[]),this.data[t][e]=r[t][e])}}getTilesMatrix(){if(0===this.data.length)throw Error("Map not generated. First use `generate()`");return this.data.map(e=>e.map(e=>e.tileIndex))}getCollideMatrix(){if(0===this.data.length)throw Error("Map not generated. First use `generate()`");return this.data.map(e=>e.map(e=>e.collide?1:0))}pickBiomeAt(e,t){if(0===this.data.length)throw Error("Map not generated. First use `generate()`");return this.data[t]?.[e]||null}getBiomes(){return this.layers.map(e=>e.biomes).flat()}refreshSeed(e=null){if(e){if(e.length!==perlin_1.PERLIN_SIZE+1)throw Error(`Invaid seed length. Expect ${perlin_1.PERLIN_SIZE+1} numbers`);this.seed=e}else{this.seed=[];for(let e=0;e<perlin_1.PERLIN_SIZE+1;e++)this.seed.push(Math.random())}}generateLayer(i){var{frequencyChange:e=10,sizeDifference:t=1.1,bordersPuriry:r=10}=i.parameters,a=Math.max(1,Math.min(64,e)),n=22-Math.max(2,Math.min(20,r)),s=Math.max(.1,Math.min(3,t));const h=[];for(let r=0;r<this.height;r++){h[r]=[];for(let e=0;e<this.width;e++){let t=(0,perlin_1.default)({seed:this.seed,octaves:n,x:e/this.width*a,y:r/this.height*a});t**=s;var l=i.biomes.find(({level:e})=>t<=e);h[r][e]=l||null}}return h}}module.exports=GenBiome;