"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,r,a){void 0===a&&(a=r);var i=Object.getOwnPropertyDescriptor(t,r);i&&("get"in i?t.__esModule:!i.writable&&!i.configurable)||(i={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,a,i)}:function(e,t,r,a){e[a=void 0===a?r:a]=t[r]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&__createBinding(t,e,r);return __setModuleDefault(t,e),t};const perlin_1=__importStar(require("./perlin"));class GenBiome{width;height;layers;data=[];seed=[];constructor(e){var{width:e,height:t,seed:r,layers:a=[]}=e;this.width=e,this.height=t,this.layers=a,this.seed=r||GenBiome.generateRandomSeed()}static generateRandomSeed(){const t=[];for(let e=0;e<perlin_1.DEFAULT_PERLIN_SIZE+1;e++)t.push(Math.random());return t}addLayer(e){this.layers.push(e)}clearLayers(){this.layers=[]}generate(){this.data=[];for(const e of this.layers){var r=this.generateLayer(e);for(let t=0;t<r.length;t++)for(let e=0;e<r[t].length;e++)null!==r[t][e]&&(this.data[t]||(this.data[t]=[]),this.data[t][e]=r[t][e])}}getTilesMatrix(){if(0===this.data.length)throw Error("Map not generated. First use `generate()`");return this.data.map(e=>e.map(e=>e.tileIndex))}getCollideMatrix(){if(0===this.data.length)throw Error("Map not generated. First use `generate()`");return this.data.map(e=>e.map(e=>e.collide?1:0))}pickBiomeAt(e,t){if(0===this.data.length)throw Error("Map not generated. First use `generate()`");return this.data[t]?.[e]||null}getBiomes(){return this.layers.map(e=>e.biomes).flat()}getSeed(){return this.seed}setSeed(e){this.seed=e}generateLayer(a){var{frequencyChange:e=10,sizeDifference:t=1.1,bordersPuriry:r=10}=a.parameters,i=Math.max(1,Math.min(64,e)),n=22-Math.max(2,Math.min(20,r)),s=Math.max(.1,Math.min(3,t));const h=[];for(let t=0;t<this.height;t++){h[t]=[];for(let e=0;e<this.width;e++){let r=(0,perlin_1.default)({seed:this.seed,octaves:n,x:e/this.width*i,y:t/this.height*i});r**=s;var o=a.biomes.find(({level:e})=>{var[e,t]=e;return(void 0===e||r>=e)&&(void 0===t||r<t)});h[t][e]=o||null}}return h}}module.exports=GenBiome;